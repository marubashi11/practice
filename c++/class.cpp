#include <iostream>
#include <string>
using namespace std;

class Neko{
private:
  //非公開(クラスの中身に触れない)。後で変更するつもりのないデータはここに書く。なお、"public:"より上にあればこれにあたるので"private:"は省略しても良い。
  string name;
public://公開(クラスの設定をする)。
  Neko(string s){
    //これはクラス名と同名の特別な関数(コンストラクタ)。外から受け取った文字列(引数)を名前としている。
    name = s;
  }
  void naku(){
    //こちらが動作に当たる部分。
    cout << "にゃあ。俺様は" << name << "だ。\n";
  }
};

/*
  クラスの書き方は

  class クラス名{
  中身
  };

  クラスとは定義したいもの(上の例ではNeko)の設計図のようなもの。
  Neko:
  データ:名前
  動作  :鳴く
  ↑こういうものを作っている。
  なお、上の例のようにクラスの中にそのメンバ関数を書いてしまうと、クラスを呼び出すたびにその中の関数を書いているようなものなので本当は良くない。メンバ関数は外に書き、クラスの中ではその関数を使う宣言だけをするのが良い。
*/

int main(){
  string s;
  cout << "どら猫を生成します。名前を入力してください。\n";
  cin >> s;
  Neko dora(s);
  cout << "あなたの猫がメモリ上に生成されました。\n"
       << "猫が鳴きます。\n";
  dora.naku();
}

/*
  これがクラスを使ったオブジェクトの例。

  クラス名 変数(引数);

  の形で書くことで、その変数で表されるオブジェクトが生成され、同時にコンストラクタも実行される。

  dora.naku();

  は、Nekoのdoraにnakuを実行させている。
*/
